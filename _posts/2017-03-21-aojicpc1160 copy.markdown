---
layout: post
title:  "ICPC Domestic 2009 - 島はいくつある？"
date:   2017-03-21 01:00:00
categories: 競技プログラミング
---

> 陸に対応する二つの正方形領域が、地図上で縦、横または斜め方向に隣接しているな
> ら、一方から他方へ歩いて行くことができる。陸に対応する二つの領域が同じ島に属
> するのは、一方から他方へ(一般には別の陸地を経由して)歩いて行ける時であり、ま
> たその時のみである。なお、この地図の海域は海で囲まれており、その外側へ歩いて
> 出ることはできない。[How Many Islands?](http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=1160&lang=jp)

### 入力
* 整数w, h
* c <sub>i,j</sub> - 0または1(0なら海、1なら陸)

適当な場所から陸続きになっているところまで全探索し、塗りつぶして行く。最終的に
陸地がなくなるまで繰り返して行くことによって答えが得られる。斜め移動も可能なこ
とに注意。

```c++
//#define _GRIBCXX_DEBUG
#include <bits/stdc++.h>
using namespace std;

int w, h;
int a[51][51];
int dx[]{1,-1,0,0,1,-1,1,-1};
int dy[]{0,0,1,-1,1,-1,-1,1};

void dfs(int x, int y) {
    a[x][y] = 0;
    for(int i=0; i<8; ++i) {
        int nx = x + dx[i];
        int ny = y + dy[i];
        if(nx>=0&&nx<h&&ny>=0&&ny<w&&a[nx][ny]==1) {
            dfs(nx, ny);
        }
    }
}

int main()
{
    while(cin>>w>>h, w) {
        for(int i; i<h; ++i)
            for(int j=0; j<w; ++j) a[i][j] = 0;

        for(int i=0; i<h; ++i) {
            for(int j=0; j<w; ++j) {
                cin >> a[i][j];
            }
        }

        int ans = 0;
        for(int i=0; i<h; ++i) {
            for(int j=0; j<w; ++j) {
                if(a[i][j]==1) {
                    dfs(i,j);
                    ans++;
                }
            }
        }
        cout << ans << endl;
    }
    return 0;
}


```
