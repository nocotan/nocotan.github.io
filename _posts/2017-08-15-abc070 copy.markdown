---
layout: post
title:  "Atcoder Beginner Contest 070"
date:   2017-08-15 01:00:00
categories: 競技プログラミング
---

[Atcoder Beginner Contest 070](http://abc070.contest.atcoder.jp/)

### A - Palindromic Number

[http://abc070.contest.atcoder.jp/tasks/abc070_a](http://abc070.contest.atcoder.jp/tasks/abc070_a)

3桁の整数Nが入力として与えられるので，それが回分数かどうかを判定する問題．  
問題文では入力が整数となっているけど，別に文字列で考えても問題ない．

```c++
#include <bits/stdc++.h>
using namespace std;

int main() {
    string n;
    cin >> n;
    string t = n;
    reverse(t.begin(), t.end());
    if(n==t) cout << "Yes" << endl;
    else cout << "No" << endl;
    return 0;
}
```

### B - Two Switches
[http://abc070.contest.atcoder.jp/tasks/abc070_b](http://abc070.contest.atcoder.jp/tasks/abc070_b)

スイッチが二つと，それぞれを押す時刻と離す時刻が与えられるので，両方のスイッチが押されている秒数を求める問題．  
求める秒数は(二つのスイッチのうち先に離された方の時刻) - (二つのスイッチのうち後に押された時刻)となる．

```c++
#include <bits/stdc++.h>
using namespace std;

int main() {
    int a, b, c, d;
    cin >> a >> b >> c >> d;
    int ans = min(b,d) - max(a, c);
    if(ans<0) ans = 0;
    cout << ans << endl;
    return 0;
}
```

### C - Multiple Clocks

[http://abc070.contest.atcoder.jp/tasks/abc070_c](http://abc070.contest.atcoder.jp/tasks/abc070_c)

現時点では全ての針がまっすぐ上を向いているN台の時計があって，それらを同時に動かし始めた時，次に全ての時計がまっすぐ上を向くのは何秒後かを求める問題．それぞれの時計の針の進む速度は異なっている．  
それぞれの時計の針が一周するのにかかる秒数全ての最小公倍数を取ればいい．

```c++
#include <bits/stdc++.h>
using namespace std;

int gcd(int a, int b) {
    for (;;) {
        if (a == 0) return b;
        b %= a;
        if (b == 0) return a;
        a %= b;
    }
}

int lcm(int a, int b) {
    int temp = gcd(a, b);
    return temp ? (a / temp * b) : 0;
}

int main() {
    int n;
    cin >> n;
    int ans = 1;
    for(int i=0; i<n; ++i) {
        int t;
        cin >> t;
        ans = lcm(ans, t);
    }
    cout << ans << endl;
    return 0;
}
```

### D - Transit Tree Path

[http://abc070.contest.atcoder.jp/tasks/abc070_d](http://abc070.contest.atcoder.jp/tasks/abc070_d)

N頂点の木と整数Kが入力として与えられる．その後，『頂点x<sub>i</sub>から頂点Kを経由しつつ，頂点y<sub>i</sub>まで移動する場合の最短経路を求める』というQ個の質問クエリが与えられるという問題．  
ダイクストラ法などで，ソースノードをKとした時の単一始点最短経路をあらかじめ求めておき，各クエリで(Kからx<sub>i</sub>までの最短距離) + (Kからy<sub>i</sub>までの最短距離)を出力すればいい．

```c++
#include <bits/stdc++.h>
using namespace std;

#define int long long

int V;

#define INF LONG_MAX
#define MAX_V 100000

using P = pair<int, int>;

struct edge {
    int to;
    int cost;
};

vector<edge> G[MAX_V];
int d[MAX_V];

void dijkstra(int s) {
    priority_queue<P, vector<P>, greater<P> > que;
    fill(d, d+V, INF);
    d[s] = 0;
    que.push(P(0, s));

    while (!que.empty()) {
        P p = que.top();
        que.pop();
        int v = p.second;
        if (d[v] < p.first) continue;

        for (int i=0; i<G[v].size(); ++i) {
            edge e = G[v][i];
            if (d[e.to] > d[v] + e.cost) {
                d[e.to] = d[v] + e.cost;
                que.push(P(d[e.to], e.to));
            }
        }
    }
}

signed main() {
    cin >> V;
    for(int i=0; i<V-1; ++i) {
        signed a, b, c;
        cin >> a >> b >> c;
        a--;
        b--;
        edge e = {b, c};
        G[a].push_back(e);
        e = {a, c};
        G[b].push_back(e);
    }

    int q, k;
    cin >> q >> k;
    k--;
    dijkstra(k);
    int x, y;
    for(int j=0; j<q; ++j) {
        cin >> x >> y;
        x--;
        y--;
        cout << d[x] +d[y] << endl;
    }
    return 0;
}
```
