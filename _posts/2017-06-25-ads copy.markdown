---
layout: post
title:  "All-distances Sketches"
date:   2017-06-25 01:00:00
categories: アルゴリズム
---
大規模なグラフから情報を抽出したり、処理したりするケースは多々あるが、
グラフをそのまま扱うのは非常にコストがかかる。  
よってここでは、グラフの代わりに使うことができ、
様々な情報を高速に求めることができるグラフスケッチの技法を紹介する。

## All-distances Sketches(ADS)
グラフG上でのノードiについてのADSをADS(i)とする。  
また、ノードiとノードjとの距離をd<sub>ij</sub>とする。  
あらかじめハッシュ関数rに全てのノードを通しておき、ハッシュ値が昇順になるように
ソートしておく。このハッシュ値が小さいノードから順に、以下のアルゴリズムを適用
する。

```
for u by increasing r(u) do
  ノードuからダイクストラをする
  foreach 通過したノードv do
    if |{(x,y)∈ADS(v) | yが距離v->uよりも小さい}| = k then
      枝刈り
    else
      ADS(v) <- ADS(v) ∪ {(r(u), 距離v->u)}
```

## ADSを利用したd近傍の基数/類似度推定
ノードvのd近傍のMin-Hash sketchをADS(v)から抽出したものをN<sub>d</sub>(v)とする。  
<br>
<strong>
　N<sub>d</sub>(v) = bottom-k{i ∈ ADS(V) | d<sub>vi</sub> \< d }  
</strong>
<br>

このN<sub>d</sub>(v)を利用して以下の推定ができる。
* 基数推定: <strong>\|N<sub>d</sub>(v)\|</strong>
* Jaccard係数: <strong>\|N<sub>d</sub>(v) ∩ M<sub>d</sub>(u) \|/ \|N<sub>d</sub>(v) ∩ M<sub>d</sub>(u)\|</strong>

<br>
このほかにも
* 近接中心性
* 近接類似度
* 2点間距離
* 有向直径

などを効率的に推定することができる。

## ADSのサイズと計算量
* 使用メモリ: <strong>O(kn log n)</strong>
* 構築時間: <strong>O((m + n log k) k log n)</strong>

サイズは理論的にはノード数にほぼ線形。  
しかし、現実ではスケーラビリティがあまり高くないらしく、それを改善する
[Sketch Retrieval Shortcuts(SRS)](http://iwiwi.hatenablog.com/entry/2016/05/12/142450)
という研究がされている。  
論文は[こちら](http://www.kdd.org/kdd2016/papers/files/rfp0397-akibaA.pdf)

## 実装
[All-distances SketchesのC++実装](https://github.com/nocotan/mllib/blob/master/ads/all_distances_sketch.hpp)

## 参考
* [http://www.cohenwang.com/edith/bigdataclass2013/lectures/lecture12.pdf](Leveraging Big Data)
* [大規模グラフ解析のための乱択スケッチ技法](https://www.slideshare.net/iwiwi/ss-41752585)
* [All-Distances Sketches, Revisited: HIP Estimators for Massive Graphs Analysis](https://arxiv.org/abs/1306.3284)

