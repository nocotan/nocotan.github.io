---
layout: post
title:  "系統樹探索法(SPR: subtree-prune and regraft)"
date:   2017-01-30 01:00:00
categories: アルゴリズム 機械学習
---

SPRとは、系統樹上の任意の部分木を切断し、
その切断部位を系統樹上の任意のノードにに再接続をするという試行である.最尤アルゴリズムであれば、
もっとも尤度の高いノードに接続をする。

参考論文(http://www.stat.wisc.edu/courses/st992-newton/smmb/homework/hw2/spr.pdf)  
C++実装は[こちら](https://github.com/nocotan/mllib/blob/master/cpp/spr.hpp)

##### 手順

* 対象となる木からランダムに初めのノードを選択する(ルートノード及び葉は選ばない)
* 選ばれたノード以下の部分木を切断する
* 切断後の木からランダムにノードを一つ選び、再接続する

##### 実装一部抜粋

```c++
// インターフェース

/**
 * SPR-tree node class
 */
template<typename T>
struct node : public std::enable_shared_from_this< node<T> > {
    T data;
    int label;
    std::shared_ptr< node<T> > root;
    std::shared_ptr< node<T> > left;
    std::shared_ptr< node<T> > right;

    node();
    node(T data);
    node(T data, std::shared_ptr< node<T> > root);

    void insert(T data);
    const bool has_data(T data) const;
    std::shared_ptr< node<T> > find(T data);

    template<typename U>
    friend std::ostream& operator<<(std::ostream& os, const node<U>& nd);

    private:
        void insert_left(T left);
        void insert_right(T right);
        void disp(int depth) const;
};


/**
 * SPR-tree class
 * this class implements a binary-tree which has prune and regraft method.
 */
template<typename T>
struct spr_tree : public std::enable_shared_from_this< spr_tree<T> > {
    std::shared_ptr< node<T> > root;

    spr_tree();
    spr_tree(T data);
    spr_tree(const spr_tree& tree);

    void insert(T data);
    const bool has_data(T data) const;
    std::shared_ptr< spr_tree<T> > find(T data);

    std::shared_ptr< node<T> > prune();
    void regraft(std::shared_ptr< node<T> > nd);

    template<typename U>
    friend std::ostream& operator<<(std::ostream& os, const spr_tree<U>& tree);

    private:
        std::vector< std::shared_ptr< node<T> > > pick(std::shared_ptr< node<T> > current_ptr);
};
```

```c++
// 部分木切り取り部分

/**
 * Prune step
 */
template<typename T> nd_ptr<T> spr_tree<T>::prune() {
    int dir;
    // 0->left, 1->right
    if (this->root->left  == nullptr)
        dir = 1;
    else if (this->root->right == nullptr)
        dir = 0;
    else {
        std::random_device rd;
        std::mt19937 mt(rd());
        std::uniform_int_distribution<int> dir_dist(0,1);
        dir = dir_dist(mt);
    }

    nd_vec<T> pick_list;

    if (dir == 0) {
        pick_list = this->pick(this->root->left);
    }
    else {
        pick_list = this->pick(this->root->right);
    }

    std::sort(pick_list.begin(), pick_list.end());
    pick_list.erase(std::unique(pick_list.begin(), pick_list.end()), pick_list.end());

    nd_ptr<T> empty_ptr;

    int n = pick_list.size();
    if (n == 0)
        return empty_ptr;

    std::random_device rd;
    std::mt19937 mt(rd());
    std::uniform_int_distribution<int> target_dist(0,n-1);
    int target = target_dist(mt);

    auto&& res = pick_list[target];

    if (res->root->left == res) {
        res->root->left = nullptr;
        res->root = nullptr;
    }
    else {
        res->root->right = nullptr;
        res->root = nullptr;
    }

    return pick_list[target];
}
```

```c++
// 再接続部分

template<typename T> void spr_tree<T>::regraft(nd_ptr<T> nd) {
    int dir;
    // 0->left, 1->right
    if (this->root->left  == nullptr)
        dir = 1;
    else if (this->root->right == nullptr)
        dir = 0;
    else {
        std::random_device rd;
        std::mt19937 mt(rd());
        std::uniform_int_distribution<int> dir_dist(0,1);
        dir = dir_dist(mt);
    }

    nd_vec<T> pick_list;

    if (dir == 0) {
        pick_list = this->pick(this->root->left);
        if (pick_list.size() == 0)
            pick_list = this->pick(this->root->right);
    }
    else
        pick_list = this->pick(this->root->right);
        if (pick_list.size() == 0)
            pick_list = this->pick(this->root->left);

    nd_vec<T> target_list;
    for (auto elem : pick_list) {
        if (elem->left == nullptr || elem->right == nullptr)
            target_list.push_back(elem);
    }

    std::random_device rd;
    std::mt19937 mt(rd());
    std::uniform_int_distribution<int> target_dist(0,target_list.size()-1);
    int target = target_dist(mt);

    auto&& target_nd = target_list[target];

    if (target_nd->left == nullptr) {
        target_nd->left = nd;
        nd->root = target_nd;
    }
    else if (target_nd->right == nullptr){
        target_nd->right = nd;
        nd->root = target_nd;
    }

}
```
