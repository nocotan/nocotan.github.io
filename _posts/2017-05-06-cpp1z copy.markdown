---
layout: post
title:  "C++17"
date:   2017-05-06 10:00:00
categories: C/C++
---

C++17(またはC++1z)は、C++のISO/IEC規格の次期改訂版の非公式名である。C++17の仕様は、2017年3月にInternational Standard Draftの段階に達している。このバージョンは、策定中はC++1zと呼ばれていた。以下にC++17より追加される機能及びライブラリを紹介する。

### 畳み込み式
畳み込み式は、二項演算子に対してテンプレートパラメータパックの畳み込みを行う。
畳み込み式は括弧で囲まれる必要がある

```cpp
template<typename... Args>
auto sum(Args... args) {
    return (... + args);
}

template<typename... Args>
auto product(Args... args) {
    return (... * args);
}
```
便利。

### コンパイル時ラムダ
constexprを使用してコンパイル時に評価されるラムダ式。

 ```cpp
constexpr add_one(int n) {
    return [n]{ return n+1; }();
}

constexpr twice(int n) {
    return [n]{ return n*2; }();
}
```

### コンパイル時if
constexprを使用してコンパイル時に評価されるif式。if constexpr (cond)と記述する
。

```cpp
template<typename T>
constexpr bool _is_integral() {
    if constexpr (std::is_integral<T>::value) {
        return true;
    } else {
        return false;
    }
}
```

### クラステンプレートに対するテンプレート引数の自動推論
クラステンプレートのテンプレート引数の推論を自動で行う。

```cpp
template<typename T = float>
struct Foo {
    T value;
    Foo() : value() {}
    Foo(T value) : value(value) {}
};
```

### *thisのラムダキャプチャ

```cpp
struct S {
    int x;
    void f() {
        auto a = [&](){ x = 5; };
        auto b = [=](){ x = 10; };
        a();
        assert(x == 5);
        b();
        assert(x == 10);
    }
};
```

### 入れ子状の名前空間
namespace A::B {}のように記述することで、入れ子の名前空間を表現することが可能に
なる。

```cpp
namespace A::B::C {
    // ...
}
```

### std::optional
無効値を取ることができる型であり、変数の中身が存在しない可能性を明示することができる。
Boost.Optionalの実装を元に設計された。

```cpp
std::optional<std::string> some(bool x) {
    if (x) return "Some";
    else return {};
}
```

### std::any
anyクラスは、任意の型の単一の値に対するタイプセーフなコンテナを記述する。

```cpp
std::any x = 10;
std::any y = 1.5;
std::any z = "str";
```

### 機能の削除
* トライグラフの削除
* registerキーワードを削除
* bool肩に対するインクリメント演算子を削除
* 非推奨だった古い例外仕様を削除
