---
layout: post
title:  "ICPC Domestic 2004 - Red and Black"
date:   2017-03-20 01:00:00
categories: 競技プログラミング
---

> 正方形のタイルが敷き詰められた長方形の部屋がある。タイルの色は赤か黒である。
> 最初に一人の人が部屋の黒いタイルの上に立っている。あるタイルからは隣接する四
> つのタイルに移動することができる。ただし、赤いタイルの上に移動することはでき
> ない。移動できるのは黒いタイルの上だけである。
> 上記の移動を繰り返すことによって到達できるタイルの数を答えるプログラムを書き
> なさい
[Red and Black](http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=1130&lang=jp)

### 入力
* 整数w, h
* '.' - 黒いタイル
* '#' - 赤いタイル
* '@' - 初期位置

全探索で解ける。今回は深さ優先探索を使った。
現在地から四方向を見て、移動先が黒いタイルなら移動してカウントをインクリメント
していく。また、移動方向をdx,dyという配列で持っておくことで、ループで一通りの移
動ができる。
する。

```c++
#include <bits/stdc++.h>
using namespace std;

int w, h;
char a[21][21];
int dx[]{1,-1,0,0};
int dy[]{0,0,1,-1};
int cnt;

void dfs(int x, int y) {
    a[x][y] = 0;
    for(int i=0; i<4; ++i) {
        int nx = x + dx[i], ny = y + dy[i];
        if(0<=nx&&nx<h&&0<=ny&&ny<w&&a[nx][ny]=='.') {
            cnt++;
            dfs(nx, ny);
        }
    }
}

int main() {
    while(cin>>w>>h, w) {
        cnt = 1;
        for(int i=0; i<h; ++i) cin >> a[i];
        for(int i=0; i<h; ++i)
            for(int j=0; j<w; ++j) {
            if(a[i][j]=='@') {
                dfs(i,j);
                break;
            }
        }
        cout << cnt << endl;
    }
}
```
