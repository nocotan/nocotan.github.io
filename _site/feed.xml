<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>nocohub</title>
    <description>機械学習,データ解析,ディープラーニング,C/C++,Pyhton,Java,プログラミング
</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Tue, 02 May 2017 00:35:40 +0900</pubDate>
    <lastBuildDate>Tue, 02 May 2017 00:35:40 +0900</lastBuildDate>
    <generator>Jekyll v3.3.1</generator>
    
      <item>
        <title>OpenSSL</title>
        <description>&lt;p&gt;OpenSSLは通信を暗号化するSecure Sockets Layero(SSL)をオープンソースで実装するライブラリ。
SSLは安全な通信を行うためにサーバとクライアント間で暗号化して盗聴を防ぐことを目的としている。
クライアントは、サーバの公開鍵を使用してサーバに接続し、暗号化したファイルを送信する。
サーバは公開鍵の対となる秘密鍵で復号化する。SSLはWebで頻繁に使用されている。
SSLを使用しない通信はhttp://(ポート番号80)となり、SSLを使用した通信はhttps://(ポート番号443)となる。
&lt;a href=&quot;https://www.openssl.org/&quot;&gt;OpenSSL&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;関連用語&quot;&gt;関連用語&lt;/h3&gt;

&lt;h4 id=&quot;cacertification-authority&quot;&gt;CA(Certification Authority)&lt;/h4&gt;
&lt;p&gt;SSLを使用するための証明書を発行する認証局。&lt;/p&gt;

&lt;h4 id=&quot;crlcertificate-revocation-list&quot;&gt;CRL(Certificate Revocation List)&lt;/h4&gt;
&lt;p&gt;証明書失効リスト。鍵の漏えいなどで鍵の信頼性が失われ、無効となった証明書のリストである。以下の二種類の失効理由がある。&lt;/p&gt;

&lt;h4 id=&quot;csrcertificate-signing-request&quot;&gt;CSR(Certificate Signing Request)&lt;/h4&gt;
&lt;p&gt;証明書を発行するために認証局(CA)に提出する証明書発行要求ファイル。&lt;/p&gt;

&lt;h4 id=&quot;der&quot;&gt;DER&lt;/h4&gt;
&lt;p&gt;証明書、秘密鍵、CSR、及びCRLファイルの形式。&lt;/p&gt;

&lt;h4 id=&quot;desdata-encryption-standard&quot;&gt;DES(Data Encryption Standard)&lt;/h4&gt;
&lt;p&gt;対称鍵暗号の一方式&lt;/p&gt;

&lt;h4 id=&quot;pem&quot;&gt;PEM&lt;/h4&gt;
&lt;p&gt;証明書、秘密鍵、CSR、及びCRLファイルの形式。DER形式のファイルをBase64にエンコー
ド処理したテキスト形式のファイル。&lt;/p&gt;

&lt;h4 id=&quot;rsarivest-shamir-adleman&quot;&gt;RSA(Rivest Shamir Adleman)&lt;/h4&gt;
&lt;p&gt;桁数の大きい合成数の素因数分解問題が困難であることを安全性の根拠とした公開鍵暗
号の一つ。&lt;/p&gt;

&lt;h4 id=&quot;x509&quot;&gt;X.509&lt;/h4&gt;
&lt;p&gt;電子証明書及び証明書執行リスト(CRL)の標準仕様。&lt;/p&gt;

&lt;h3 id=&quot;インストール&quot;&gt;インストール&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ wget -P /usr/local/src https://www.openssl.org/source/openssl-1.1.0e.tar.gz
$ cd /usr/local/src
$ tar xzf openssl-1.1.0e.tar.gz
$ cd openssl-1.1.0e.tar.gz
$ ./config --prefix=/usr/local
$ make
$ make install
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

</description>
        <pubDate>Mon, 01 May 2017 10:00:00 +0900</pubDate>
        <link>http://localhost:4000/%E6%9A%97%E5%8F%B7/2017/05/01/openssl-copy.html</link>
        <guid isPermaLink="true">http://localhost:4000/%E6%9A%97%E5%8F%B7/2017/05/01/openssl-copy.html</guid>
        
        
        <category>暗号</category>
        
      </item>
    
      <item>
        <title>no matching function for call to transform</title>
        <description>&lt;p&gt;以下のようなコードを書いた時に発生する。&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;algorithm&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;transform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;begin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;begin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;toupper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;そもそもtoupperはstd名前空間で定義されたものではなく、グローバル名前空間で定義されている。よって、以下のコードであれば正常に動作する。&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;algorithm&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;transform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;begin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;begin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;toupper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;toupper及びtolowerに関しては、名前空間を解決する際に、別のオーバーロードされた関数toupeer、tolowerが存在する。これによって、引数にstd::toupeerを渡すことによって参照しているオーバーロードを解決できなくなる。
そのため、コンパイラはエラーメッセージに未解決のオーバーロードされた関数型を指定している。&lt;/p&gt;
</description>
        <pubDate>Sun, 16 Apr 2017 10:00:00 +0900</pubDate>
        <link>http://localhost:4000/c/c++/2017/04/16/cpptransform-copy.html</link>
        <guid isPermaLink="true">http://localhost:4000/c/c++/2017/04/16/cpptransform-copy.html</guid>
        
        
        <category>C/C++</category>
        
      </item>
    
      <item>
        <title>誤り訂正出力符号による多クラス分類</title>
        <description>&lt;p&gt;&lt;strong&gt;誤り訂正符号(ECC: Error Correcting Code)&lt;/strong&gt;とは、データを記録・伝送する通信の際に生じるノイズを検出し、訂正することができるように付加される符号である。
元のデータからあらかじめ算出しておいて、データとともに記録・伝送される。有名な誤り訂正符号には、ハミング符号や水平垂直パリティ符号、リードソロモン符号、BCH符号などがある。
この仕組みに基づいて多クラス分類問題を考える&lt;strong&gt;誤り訂正出力符号(ECOC: Error Correcting Output Code)&lt;/strong&gt;という方式が存在する。&lt;/p&gt;

&lt;h3 id=&quot;クラスラベルの符号化&quot;&gt;クラスラベルの符号化&lt;/h3&gt;

&lt;p&gt;各クラスそれぞれに、異なる数値列が割り当てられているとする。この数値列を符号語と呼ぶ。
ここでは、長さがmで、各値が1もしくは-1をとる符号語が割り当てられているとする。
クラス数をcとし、各クラスに対してそれぞれ符号長mの符号語を割り当てるとすると、c x mの符号化行列Sが得られる。
符号化行列の、ある一つの列に注目した時、各クラスに1か-1が割り当てられているため、2値分類として考えることができる。
その結果、符号化行列の各列に対応するm個の2値分類学習器が得られる。ある入力xに対するm個の学習器の出力をf&lt;sup&gt;1&lt;/sup&gt;(x) … f&lt;sup&gt;m&lt;/sup&gt;(x)とし、
これがどのクラスの符号語に近いかで割り当てるクラスを決定することができる。&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;クラス&lt;/th&gt;
      &lt;th&gt;a&lt;/th&gt;
      &lt;th&gt;b&lt;/th&gt;
      &lt;th&gt;c&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;-1&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;-1&lt;/td&gt;
      &lt;td&gt;-1&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
</description>
        <pubDate>Sun, 16 Apr 2017 10:00:00 +0900</pubDate>
        <link>http://localhost:4000/%E6%A9%9F%E6%A2%B0%E5%AD%A6%E7%BF%92/2017/04/16/ecoc-copy.html</link>
        <guid isPermaLink="true">http://localhost:4000/%E6%A9%9F%E6%A2%B0%E5%AD%A6%E7%BF%92/2017/04/16/ecoc-copy.html</guid>
        
        
        <category>機械学習</category>
        
      </item>
    
      <item>
        <title>Label Propagation</title>
        <description>&lt;p&gt;半教師あり学習アルゴリズム『Label Propagation』の紹介。このアルゴリズムでは、ノ
ードのラベルが近傍に応じて近くのノードに伝播する、グラフ上の伝播の形式として問
題を定式化する。このプロセスでは、もともとラベルがついているデータに関してはラ
ベルを固定する。したがって、ラベル付きデータはラベルのついていないデータに対し
てラベルを「伝播」させるように振る舞う。&lt;br /&gt;
&lt;a href=&quot;http://nocotan.github.io/%E6%A9%9F%E6%A2%B0%E5%AD%A6%E7%BF%92/2017/04/10/graphbasedlearning-copy.html&quot;&gt;グラフベース半教師あり学習について&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;問題設定&quot;&gt;問題設定&lt;/h2&gt;
&lt;p&gt;{(x&lt;sub&gt;1&lt;/sub&gt;, y&lt;sub&gt;1&lt;/sub&gt;) … (x&lt;sub&gt;l&lt;/sub&gt;, y&lt;sub&gt;l&lt;/sub&gt;)}をラベル付き
データとし、{x&lt;sub&gt;l+1&lt;/sub&gt; … s&lt;sub&gt;l+u&lt;/sub&gt;}をラベルなしデータとする。(一
般に l « u)。また、全体のデータ数をnとし、全体のクラス数Cは既知のものとする。  &lt;br /&gt;
直感的に、同じラベルがついているデータは似ていると思われる。ラベルづけ
されたものとラベルづけされていないものの両方をノードとするグラフを作成し、ノー
ドi, j間のエッジはそれらのノードの類似性を表すものとする。グラフは以下の重みで
完全に接続されているものとする。 &lt;br /&gt;
&lt;br /&gt;
 &lt;strong&gt;w&lt;sub&gt;ij&lt;/sub&gt; = exp(- ||x&lt;sub&gt;i&lt;/sub&gt; - x&lt;sub&gt;j&lt;/sub&gt;||&lt;sup&gt;2&lt;/sup&gt; / α&lt;sup&gt;2&lt;/sup&gt;)&lt;/strong&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;アルゴリズム&quot;&gt;アルゴリズム&lt;/h2&gt;
&lt;p&gt;まず、ラベルをエッジに伝播させていく。エッジの重みを大きくすると、ラベルが容易
に移動するようになる。n x nの確率的遷移行列Pを定義すると、  &lt;br /&gt;
&lt;br /&gt;
 &lt;strong&gt;P&lt;sub&gt;ij&lt;/sub&gt; = P(i → j) = w&lt;sub&gt;ij&lt;/sub&gt; / Σw&lt;sub&gt;ik&lt;/sub&gt;&lt;/strong&gt;&lt;br /&gt;
&lt;br /&gt;
P&lt;sub&gt;ij&lt;/sub&gt;はノードiからjへの遷移確率である。クラス数をCとし、i番目の行が
y&lt;sub&gt;i&lt;/sub&gt;を指すベクトルであるようなl x Cラベル行列Y&lt;sub&gt;L&lt;/sub&gt;を定義する。
ここで、各ノードに対するソフトラベルfを計算する。fはn x Cの行列であり、行はラベ
ルの確率分布として解釈することができる。&lt;br /&gt;
以下がラベル伝播法のアルゴリズムである。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;f ← Pf&lt;/li&gt;
  &lt;li&gt;Clamp the labeled data f&lt;sub&gt;L&lt;/sub&gt; = Y&lt;sub&gt;L&lt;/sub&gt;&lt;/li&gt;
  &lt;li&gt;Repeat from step 1 until f converges&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;ステップ1で、全てのノードから、それらの近傍へラベルを伝搬させる。&lt;br /&gt;
ステップ2で、ラベル付きデータのラベルで上書きし直す。&lt;/p&gt;

&lt;h2 id=&quot;scikit-learnを使用した実装&quot;&gt;scikit-learnを使用した実装&lt;/h2&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# -*- coding: utf-8 -*-&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;numpy&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;np&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sklearn&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;datasets&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sklearn.semi_supervised&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LabelPropagation&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;model&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LabelPropagation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;iris&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;datasets&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;load_iris&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;random_unlabeled_points&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;randint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iris&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;labels&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;copy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iris&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;labels&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;random_unlabeled_points&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iris&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;labels&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;score&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iris&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iris&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h5 id=&quot;参考論文&quot;&gt;参考論文&lt;/h5&gt;
&lt;p&gt;&lt;a href=&quot;http://www.aaai.org/Papers/ICML/2003/ICML03-118.pdf&quot;&gt;Semi-Supervised Learning Using Gaussian Fields and Harmonic Functions&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 11 Apr 2017 10:00:00 +0900</pubDate>
        <link>http://localhost:4000/%E6%A9%9F%E6%A2%B0%E5%AD%A6%E7%BF%92/2017/04/11/labelpropagation-copy.html</link>
        <guid isPermaLink="true">http://localhost:4000/%E6%A9%9F%E6%A2%B0%E5%AD%A6%E7%BF%92/2017/04/11/labelpropagation-copy.html</guid>
        
        
        <category>機械学習</category>
        
      </item>
    
      <item>
        <title>Graph-based Semi-Supervised Learning</title>
        <description>&lt;p&gt;グラフベースの半教師あり学習の紹介。&lt;br /&gt;
半教師あり学習は、普通の教師あり学習と比べて、ラベルのついていない(大量の)デー
タを学習に用いることがきるという利点がある。&lt;/p&gt;

&lt;h2 id=&quot;教師あり学習&quot;&gt;教師あり学習&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/nocotan/nocotan.github.io/master/images/20170410/flow1.png&quot; alt=&quot;画像&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;決定木,サポートベクターマシンなど&lt;/li&gt;
  &lt;li&gt;ラベル付きデータを使用して学習を行う&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;半教師あり学習ssl-semi-supervised-learning&quot;&gt;半教師あり学習(SSL: Semi-Supervised Learning)&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/nocotan/nocotan.github.io/master/images/20170410/flow2.png&quot; alt=&quot;画像&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Self-Training, Co-Trainingなど&lt;/li&gt;
  &lt;li&gt;ラベル付きデータに加えて、大量のラベルなしデータを使用して学習を行う&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;半教師あり学習の利点&quot;&gt;半教師あり学習の利点&lt;/h3&gt;
&lt;p&gt;一般に、分類器の性能をあげるために、データを大量に与えたい。しかし、ラベル付き
データを集めるのはとてもコストがかかる。特に、現時点でラベルがついていないデー
タに対して人力でラベルをつける作業は、非常に多くの時間やコストを要する。一方ラ
ベルなしデータであれば、コストをかけることなく大量に手に入れることができる。普通の
教師あり学習ではこれらのラベルなしデータはあくまで分類対象でしかなく、明らかな
デッドリソースである。こういったデータを学習に上手に利用することで分類器の性能
向上を目指すというのが、半教師あり学習の考え方である。&lt;/p&gt;

&lt;h2 id=&quot;graph-based-semi-supervised-learning&quot;&gt;Graph-based Semi-supervised Learning&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;ノード間が重みの大きいエッジで繋がっているならば、それらのノードは同じラベル
を持っているはずだという仮定をする -&amp;gt; 類似度の大きいデータは同じラベルを持っ
ているのではないかという仮定&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/nocotan/nocotan.github.io/master/images/20170410/flow3.png&quot; alt=&quot;画像&quot; /&gt;
&lt;img src=&quot;https://raw.githubusercontent.com/nocotan/nocotan.github.io/master/images/20170410/flow4.png&quot; alt=&quot;画像&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;neighborhood-methods&quot;&gt;Neighborhood Methods&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;k-Nearest Neighbor Graph (k-NNG)&lt;/li&gt;
  &lt;li&gt;e-Neighborhood Method&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;k-nearest-neighbor-graph-k-nng&quot;&gt;k-Nearest Neighbor Graph (k-NNG)&lt;/h4&gt;
&lt;p&gt;インスタンスとそのk最近傍点の間にエッジを追加する&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/nocotan/nocotan.github.io/master/images/20170410/flow5.png&quot; alt=&quot;画像&quot; /&gt;&lt;/p&gt;

&lt;h5 id=&quot;欠点&quot;&gt;欠点&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;スケーラブルでない&lt;/li&gt;
  &lt;li&gt;非対称グラフになる&lt;/li&gt;
  &lt;li&gt;不規則なグラフになる&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;e-neighborhood&quot;&gt;e-Neighborhood&lt;/h4&gt;
&lt;p&gt;半径eの球内の全てのインスタンスにエッジを追加する&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/nocotan/nocotan.github.io/master/images/20170410/flow6.png&quot; alt=&quot;画像&quot; /&gt;&lt;/p&gt;

&lt;h5 id=&quot;欠点-1&quot;&gt;欠点&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;スケーラブルでない&lt;/li&gt;
  &lt;li&gt;eの値に敏感&lt;/li&gt;
  &lt;li&gt;断片化されたグラフになる -&amp;gt; 接続されていないインスタンスが大量に出現する可能
性がある&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;アルゴリズム&quot;&gt;アルゴリズム&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://nocotan.github.io/%E6%A9%9F%E6%A2%B0%E5%AD%A6%E7%BF%92/2017/04/11/labelpropagation-copy.html&quot;&gt;Label Propagation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Modified Adsorption&lt;/li&gt;
  &lt;li&gt;Measure Propagation&lt;/li&gt;
  &lt;li&gt;Sparse Label Propagation&lt;/li&gt;
  &lt;li&gt;Manifold Regularization&lt;/li&gt;
  &lt;li&gt;Spectral Graph Transduction&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Mon, 10 Apr 2017 10:00:00 +0900</pubDate>
        <link>http://localhost:4000/%E6%A9%9F%E6%A2%B0%E5%AD%A6%E7%BF%92/2017/04/10/graphbasedlearning-copy.html</link>
        <guid isPermaLink="true">http://localhost:4000/%E6%A9%9F%E6%A2%B0%E5%AD%A6%E7%BF%92/2017/04/10/graphbasedlearning-copy.html</guid>
        
        
        <category>機械学習</category>
        
      </item>
    
      <item>
        <title>ICPC Domestic 2009 - 島はいくつある？</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;陸に対応する二つの正方形領域が、地図上で縦、横または斜め方向に隣接しているな
ら、一方から他方へ歩いて行くことができる。陸に対応する二つの領域が同じ島に属
するのは、一方から他方へ(一般には別の陸地を経由して)歩いて行ける時であり、ま
たその時のみである。なお、この地図の海域は海で囲まれており、その外側へ歩いて
出ることはできない。&lt;a href=&quot;http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=1160&amp;amp;lang=jp&quot;&gt;How Many Islands?&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;入力&quot;&gt;入力&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;整数w, h&lt;/li&gt;
  &lt;li&gt;c &lt;sub&gt;i,j&lt;/sub&gt; - 0または1(0なら海、1なら陸)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;適当な場所から陸続きになっているところまで全探索し、塗りつぶして行く。最終的に
陸地がなくなるまで繰り返して行くことによって答えが得られる。斜め移動も可能なこ
とに注意。&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;//#define _GRIBCXX_DEBUG
&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;51&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;51&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;dfs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ny&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ny&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ny&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ny&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;dfs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ny&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;cin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ans&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;dfs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;ans&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ans&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;


&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Tue, 21 Mar 2017 10:00:00 +0900</pubDate>
        <link>http://localhost:4000/%E7%AB%B6%E6%8A%80%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0/2017/03/21/aojicpc1160-copy.html</link>
        <guid isPermaLink="true">http://localhost:4000/%E7%AB%B6%E6%8A%80%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0/2017/03/21/aojicpc1160-copy.html</guid>
        
        
        <category>競技プログラミング</category>
        
      </item>
    
      <item>
        <title>ICPC Domestic 2004 - Red and Black</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;正方形のタイルが敷き詰められた長方形の部屋がある。タイルの色は赤か黒である。
最初に一人の人が部屋の黒いタイルの上に立っている。あるタイルからは隣接する四
つのタイルに移動することができる。ただし、赤いタイルの上に移動することはでき
ない。移動できるのは黒いタイルの上だけである。
上記の移動を繰り返すことによって到達できるタイルの数を答えるプログラムを書き
なさい
&lt;a href=&quot;http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=1130&amp;amp;lang=jp&quot;&gt;Red and Black&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;入力&quot;&gt;入力&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;整数w, h&lt;/li&gt;
  &lt;li&gt;’.’ - 黒いタイル&lt;/li&gt;
  &lt;li&gt;’#’ - 赤いタイル&lt;/li&gt;
  &lt;li&gt;’@’ - 初期位置&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;全探索で解ける。今回は深さ優先探索を使った。
現在地から四方向を見て、移動先が黒いタイルなら移動してカウントをインクリメント
していく。また、移動方向をdx,dyという配列で持っておくことで、ループで一通りの移
動ができる。&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;21&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;21&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cnt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;dfs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ny&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ny&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ny&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ny&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;'.'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;cnt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;dfs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ny&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;cnt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;'@'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;dfs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cnt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Mon, 20 Mar 2017 10:00:00 +0900</pubDate>
        <link>http://localhost:4000/%E7%AB%B6%E6%8A%80%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0/2017/03/20/aojicpc1130-copy.html</link>
        <guid isPermaLink="true">http://localhost:4000/%E7%AB%B6%E6%8A%80%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0/2017/03/20/aojicpc1130-copy.html</guid>
        
        
        <category>競技プログラミング</category>
        
      </item>
    
      <item>
        <title>ニューラルネットワークと暗号化及び機密性の確保</title>
        <description>&lt;p&gt;アリスはボブにセキュアにメッセージを送りたいと考えている。
また、第三の攻撃者であるイブはそのメッセージを盗聴したいと考えている。
ここで、セキュリティ属性は機密性であり、攻撃者は通信を傍受できる受動的攻撃者で
あるが、セッションを開始したり、メッセージを改ざんしたりといった能動的攻撃は制
限されているものとする。&lt;/p&gt;

&lt;h2 id=&quot;システム構成&quot;&gt;システム構成&lt;/h2&gt;
&lt;p&gt;アリスはボブに平文Pを送信したいものとする。ここでアリスはPを暗号文Cに暗号化し、
ボブに送る。ボブはCを正確に複合し、複合文P&lt;sub&gt;Bob&lt;/sub&gt;を得たい。同時に、イブ
も暗号文Cを傍受し複合文P&lt;sub&gt;Eve&lt;/sub&gt;を得ようと試みる。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/nocotan/nocotan.github.io/master/images/neuralcrypto.png&quot; alt=&quot;画像&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;登場人物をニューラルネットワークとして考える&quot;&gt;登場人物をニューラルネットワークとして考える&lt;/h2&gt;
&lt;p&gt;ここで、アリス、ボブ、イブの各登場人物をニューラルネットワークAlice,Bob,Eveとす
る。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Aliceは平文Pと秘密鍵Kを入力として受け取り暗号文Cを出力する&lt;/li&gt;
  &lt;li&gt;Bobは暗号文Cと秘密鍵Kを入力として受け取り複合文P&lt;sub&gt;Bob&lt;/sub&gt;を出力する&lt;/li&gt;
  &lt;li&gt;Eveは暗号文Cを入力として受け取り複合文P&lt;sub&gt;Eve&lt;/sub&gt;を出力する&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ここで注目するのが、暗号化の際に、特定の暗号アルゴリズムを指定して用いている訳
ではないという点である。既知のアルゴリズムを用いていないため、攻撃者もニューラ
ルネットワークを構築して複合化を試みる。また、攻撃者のニューラルネットワークEve
は第三者的立場としての最善のモデルを使用することを仮定する。秘密鍵Kを平文Pごと
に新しく作成するワンタイムパッド方式であり、KとPの長さが同じであることは強制さ
れない。&lt;/p&gt;

&lt;h2 id=&quot;定義&quot;&gt;定義&lt;/h2&gt;

&lt;p&gt;それぞれの目的は以下のようになる。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;アリスはボブに、第三者に知られないようにメッセージを送りたい&lt;/li&gt;
  &lt;li&gt;ボブとイブは平文との誤りがより少なくなるように複合文を生成したい&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;それぞれのモデルのパラメータをθ&lt;sub&gt;A&lt;/sub&gt;,θ&lt;sub&gt;B&lt;/sub&gt;,θ&lt;sub&gt;E&lt;/sub&gt;とすると
、&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Aliceの出力: A(θ&lt;sub&gt;A&lt;/sub&gt;,P,K) = C&lt;/li&gt;
  &lt;li&gt;Bobの出力: B(θ&lt;sub&gt;B&lt;/sub&gt;,C,K)&lt;/li&gt;
  &lt;li&gt;Eveの出力: E(θ&lt;sub&gt;E&lt;/sub&gt;,P)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;また、距離関数d(P,P’) = Σ&lt;sub&gt;i=1,N&lt;/sub&gt;|P&lt;sub&gt;i&lt;/sub&gt; - P’&amp;lt;/sub&amp;gt;i&amp;lt;/sub&amp;gt;|とす
る。(Nは平文の長さ)。Eveについての誤差関数L&lt;sub&gt;E&lt;/sub&gt;は、&lt;br /&gt;
&lt;strong&gt;L&lt;sub&gt;E&lt;/sub&gt;(θ&lt;sub&gt;A&lt;/sub&gt;,θ&lt;sub&gt;E&lt;/sub&gt;,P,K) = d(P,E(θ&lt;sub&gt;E&lt;/sub&gt;,A(θ
&lt;sub&gt;A&lt;/sub&gt;,P,K)))&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Eveの目的関数O&lt;sub&gt;E&lt;/sub&gt;は、&lt;br /&gt;
&lt;strong&gt;O&lt;sub&gt;E&lt;/sub&gt;(θ&lt;sub&gt;A&lt;/sub&gt;) = argmin&lt;sub&gt;θE&lt;/sub&gt;(L&lt;sub&gt;E&lt;/sub&gt;(θ
&lt;sub&gt;A&lt;/sub&gt;,θ&lt;sub&gt;E&lt;/sub&gt;))&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;同様に、Bobには例ごとの複合化誤差を定義し、平文と秘密鍵の分布に拡張する。&lt;br /&gt;
&lt;strong&gt;L&lt;sub&gt;B&lt;/sub&gt;(θ&lt;sub&gt;A&lt;/sub&gt;,θ&lt;sub&gt;B&lt;/sub&gt;,P,K) = d(P,B(θ&lt;sub&gt;B&lt;/sub&gt;,A(θ
&lt;sub&gt;A&lt;/sub&gt;,P,K),K))&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;L&lt;sub&gt;B&lt;/sub&gt;(θ&lt;sub&gt;A&lt;/sub&gt;,θ&lt;sub&gt;B&lt;/sub&gt;) = iE&lt;sub&gt;P,K&lt;/sub&gt;(d(P,B(θ
&lt;sub&gt;B&lt;/sub&gt;,A(θ&lt;sub&gt;A&lt;/sub&gt;,P,K),K)))&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;AliceとBobの誤差関数L&lt;sub&gt;AB&lt;/sub&gt;は、&lt;br /&gt;
&lt;strong&gt;L&lt;sub&gt;AB&lt;/sub&gt;(θ&lt;sub&gt;A&lt;/sub&gt;,θ&lt;sub&gt;B&lt;/sub&gt;) = L&lt;sub&gt;B&lt;/sub&gt;(θ&lt;sub&gt;A&lt;/sub&gt;,θ&lt;sub&gt;B&lt;/sub&gt;) - L&lt;sub&gt;E&lt;/sub&gt;(θ&lt;sub&gt;A&lt;/sub&gt;,O&lt;sub&gt;E&lt;/sub&gt;(θ&lt;sub&gt;A&lt;/sub&gt;))&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;最後に、AliceとBobの目的関数O&lt;sub&gt;A&lt;/sub&gt;,O&lt;sub&gt;B&lt;/sub&gt;は、&lt;br /&gt;
&lt;strong&gt;(O&lt;sub&gt;A&lt;/sub&gt;,O&lt;sub&gt;B&lt;/sub&gt;) = argmin&lt;sub&gt;(θA,θB)&lt;/sub&gt;(L&lt;sub&gt;AB&lt;/sub&gt;(θ&lt;sub&gt;A&lt;/sub&gt;,θ&lt;sub&gt;B&lt;/sub&gt;))&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;学習及びアーキテクチャ&quot;&gt;学習及びアーキテクチャ&lt;/h2&gt;
&lt;p&gt;学習はSGDに基づく。また、それぞれのモデルは個別に学習を行う。&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;全結合層を最初の層にもつ&lt;/li&gt;
  &lt;li&gt;全結合層の後に畳み込み層のシーケンスが続き、最終的に平文または暗号文に適した
サイズの出力を生成する&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Python(TensorFlow)による実装(一部抜粋)&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;def build_model(self):
        # Weights for fully connected layers
        self.w_alice = init_weights(&quot;alice_w&quot;, [2 * self.N, 2 * self.N])
        self.w_bob = init_weights(&quot;bob_w&quot;, [2 * self.N, 2 * self.N])
        self.w_eve1 = init_weights(&quot;eve_w1&quot;, [self.N, 2 * self.N])
        self.w_eve2 = init_weights(&quot;eve_w2&quot;, [2 * self.N, 2 * self.N])

        # Placeholder variables for Message and Key
        self.msg = tf.placeholder(&quot;float&quot;, [None, self.msg_len])
        self.key = tf.placeholder(&quot;float&quot;, [None, self.key_len])

        # Alice's network
        # FC layer -&amp;gt; Conv Layer (4 1-D convolutions)
        self.alice_input = tf.concat(concat_dim=1, values=[self.msg, self.key])
        self.alice_hidden = tf.nn.sigmoid(tf.matmul(self.alice_input, self.w_alice))
        self.alice_hidden = tf.expand_dims(self.alice_hidden, 2)
        self.alice_output = tf.squeeze(conv_layer(self.alice_hidden, &quot;alice&quot;))

        # Bob's network
        # FC layer -&amp;gt; Conv Layer (4 1-D convolutions)
        self.bob_input = tf.concat(concat_dim=1, values=[self.alice_output, self.key])
        self.bob_hidden = tf.nn.sigmoid(tf.matmul(self.bob_input, self.w_bob))
        self.bob_hidden = tf.expand_dims(self.bob_hidden, 2)
        self.bob_output = tf.squeeze(conv_layer(self.bob_hidden, &quot;bob&quot;))

        # Eve's network
        # FC layer -&amp;gt; FC layer -&amp;gt; Conv Layer (4 1-D convolutions)
        self.eve_input = self.alice_output
        self.eve_hidden1 = tf.nn.sigmoid(tf.matmul(self.eve_input, self.w_eve1))
        self.eve_hidden2 = tf.nn.sigmoid(tf.matmul(self.eve_hidden1, self.w_eve2))
        self.eve_hidden2 = tf.expand_dims(self.eve_hidden2, 2)
        self.eve_output = tf.squeeze(conv_layer(self.eve_hidden2, &quot;eve&quot;))

 def train(self):
        # Loss Functions
        self.decrypt_err_eve = tf.reduce_mean(tf.abs(self.msg - self.eve_output))
        self.decrypt_err_bob = tf.reduce_mean(tf.abs(self.msg - self.bob_output))
        self.loss_bob = self.decrypt_err_bob + (1. - self.decrypt_err_eve) ** 2.

        # Get training variables corresponding to each network
        self.t_vars = tf.trainable_variables()
        self.alice_or_bob_vars = [var for var in self.t_vars if 'alice_' in var.name or 'bob_' in var.name]
        self.eve_vars = [var for var in self.t_vars if 'eve_' in var.name]

        # Build the optimizers
        self.bob_optimizer = tf.train.AdamOptimizer(self.learning_rate).minimize(
            self.loss_bob, var_list=self.alice_or_bob_vars)
        self.eve_optimizer = tf.train.AdamOptimizer(self.learning_rate).minimize(
            self.decrypt_err_eve, var_list=self.eve_vars)

        self.bob_errors, self.eve_errors = [], []

        # Begin Training
        tf.initialize_all_variables().run()
        for i in range(self.epochs):
            iterations = 2000

            print 'Training Alice and Bob, Epoch:', i + 1
            bob_loss, _ = self._train('bob', iterations)
            self.bob_errors.append(bob_loss)

            print 'Training Eve, Epoch:', i + 1
            _, eve_loss = self._train('eve', iterations)
            self.eve_errors.append(eve_loss)

        self.plot_errors()
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://arxiv.org/pdf/1610.06918.pdf&quot;&gt;Google Brainによる論文&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Fri, 10 Mar 2017 10:00:00 +0900</pubDate>
        <link>http://localhost:4000/%E6%A9%9F%E6%A2%B0%E5%AD%A6%E7%BF%92/%E6%9A%97%E5%8F%B7/2017/03/10/neuralcrypto-copy.html</link>
        <guid isPermaLink="true">http://localhost:4000/%E6%A9%9F%E6%A2%B0%E5%AD%A6%E7%BF%92/%E6%9A%97%E5%8F%B7/2017/03/10/neuralcrypto-copy.html</guid>
        
        
        <category>機械学習</category>
        
        <category>暗号</category>
        
      </item>
    
      <item>
        <title>Apache SparkでDeep Learning: BigDLのインストール</title>
        <description>&lt;p&gt;&lt;a href=&quot;http://spark.apache.org/&quot;&gt;Apache Spark&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;http://nocotan.github.io/spark/2017/03/06/sparkinstall-copy.html&quot;&gt;Sparkのインストール&lt;/a&gt;は完了しているものとする.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/intel-analytics/BigDL&quot;&gt;BigDL&lt;/a&gt;&lt;br /&gt;
Apache Spark用の分散型ディープラーニングライブラリ.以下のような特徴がある.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;豊富なディープラーニングのサポート.Torchをモデルにしており、数値計算や高レベ
ルのニューラルネットワークを包括的にサポートする.
BigDLを使用してSparkプログラムに事前に学習したCaffeまたはTorchモデルを読み込
むことができる.&lt;/li&gt;
  &lt;li&gt;非常に高いパフォーマンス.高性能を実現するために、各Sparkタスクでintel MKLとマ
ルチスレッドプログラミングを使用する.その結果、単一ノードXeon上の
Caffe,Torch,TensorFlowよりも数桁拘束である.&lt;/li&gt;
  &lt;li&gt;高効率なスケールアウト.Apache Sparkを活用し、同期SGDを効率的に実装し、Sparkで
全ての通信を削減することでデータ分析を効率的にスケールアウトすることができる.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Mavenが必要なのでインストールしておく.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo apt-get install maven
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;BigDLのダウンロード&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git clone https://github.com/intel-analytics/BigDL.git
$ cd BigDL
$ source scripts/bigdl.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;ビルドする.この時、java.lang.OutOfMemoryError対策で、PermSizeを設定しておく.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ export MAVEN_OPTS=&quot;-Xmx512m -XX:MaxPermSize=128m&quot;
$ bash make-dist.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;もしここで以下のようなエラーが出たら、リブートする.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[error] Required file not found: sbt-interface.jar
[error] See zinc -help for information about locating necessary files
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;spark-shellから使用するには、以下のようにする.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ spark-shell --jars BigDL/dist/lib/bigdl-0.1.0-SNAPSHOT-jar-with-dependencies.jar
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Wed, 08 Mar 2017 10:00:00 +0900</pubDate>
        <link>http://localhost:4000/spark/2017/03/08/sparkbigdl-copy.html</link>
        <guid isPermaLink="true">http://localhost:4000/spark/2017/03/08/sparkbigdl-copy.html</guid>
        
        
        <category>Spark</category>
        
      </item>
    
      <item>
        <title>Apache Sparkでk-means</title>
        <description>&lt;p&gt;&lt;a href=&quot;http://spark.apache.org/&quot;&gt;Apache Spark&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;http://nocotan.github.io/spark/2017/03/06/sparkinstall-copy.html&quot;&gt;Sparkのインストール&lt;/a&gt;は完了しているものとする.&lt;/p&gt;

&lt;h3 id=&quot;k-means&quot;&gt;k-means&lt;/h3&gt;
&lt;p&gt;k-meansは、データセットをあらかじめ決めておいたクラスタ数にクラスタリングする一
般的なクラスタリングアルゴリズムのうちの一つ.
MLlibの実装には、kmeans||と呼ばれる、k-means++の並列化変形が含まれる.&lt;/p&gt;

&lt;h3 id=&quot;例&quot;&gt;例&lt;/h3&gt;

&lt;p&gt;org.apache.spark.ml.clustering.KMeansをインポートすることでk-meansが使用できる.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;2行目はデータセットの読み込みを行う.データセットのパスは適宜変更する.&lt;/li&gt;
  &lt;li&gt;3行目でクラスタ数、及びランダムシードを与えている.&lt;/li&gt;
  &lt;li&gt;4行目でデータセットに対して学習させる.&lt;/li&gt;
  &lt;li&gt;最後の行では各クラスタの重心を表示している.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;scala&amp;gt; import import org.apache.spark.ml.clustering.KMeans
import org.apache.spark.ml.clustering.KMeans

scala&amp;gt; val dataset = spark.read.format(&quot;libsvm&quot;).load(&quot;/opt/spark/data/mllib/sample_kmeans_data.txt&quot;)
dataset: org.apache.spark.sql.DataFrame = [label: double, features: vector]

scala&amp;gt; val kmeans = new KMeans().setK(2).setSeed(1L)
kmeans: org.apache.spark.ml.clustering.KMeans = kmeans_480ce4224497

scala&amp;gt; val model = kmeans.fit(dataset)
model: org.apache.spark.ml.clustering.KMeansModel = kmeans_480ce4224497

scala&amp;gt; val WSSSE = model.computeCost(dataset)
WSSE: Double = 0.11999999999994547

scala&amp;gt; model.clusterCenters.foreach(println)
[9.1,9.1,9.1]
[0.1,0.1,0.1]
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;使用したコードは&lt;a href=&quot;https://github.com/nocotan/spark-examples/blob/master/examples/KMeansSample.scala&quot;&gt;こちら&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 07 Mar 2017 10:00:00 +0900</pubDate>
        <link>http://localhost:4000/spark/%E6%A9%9F%E6%A2%B0%E5%AD%A6%E7%BF%92/2017/03/07/sparkkmeans-copy.html</link>
        <guid isPermaLink="true">http://localhost:4000/spark/%E6%A9%9F%E6%A2%B0%E5%AD%A6%E7%BF%92/2017/03/07/sparkkmeans-copy.html</guid>
        
        
        <category>Spark</category>
        
        <category>機械学習</category>
        
      </item>
    
  </channel>
</rss>
